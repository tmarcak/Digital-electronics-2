
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a18  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f4  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  
    reg_name++;                             
    *reg_name = *reg_name | (1<<pin_num);   
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
     *reg_name = *reg_name | (1<<pin_num);    
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  e0:	65 e0       	ldi	r22, 0x05	; 5
  e2:	84 e2       	ldi	r24, 0x24	; 36
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	85 e2       	ldi	r24, 0x25	; 37
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D2);
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	84 e2       	ldi	r24, 0x24	; 36
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D3);
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	84 e2       	ldi	r24, 0x24	; 36
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 112:	63 e0       	ldi	r22, 0x03	; 3
 114:	85 e2       	ldi	r24, 0x25	; 37
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
    
    GPIO_config_output(&DDRB, LED_D4);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	84 e2       	ldi	r24, 0x24	; 36
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
    
    
    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 130:	e1 e8       	ldi	r30, 0x81	; 129
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 83       	st	Z, r24
 13a:	80 81       	ld	r24, Z
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 140:	ef e6       	ldi	r30, 0x6F	; 111
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 14a:	78 94       	sei
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x6c>

0000014e <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
        static uint8_t i=2;
        static int8_t dir=1;
        
        GPIO_write_low(&PORTB, i);
 170:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <i.1631>
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        
        if((i!=2) | (i!=5))
            GPIO_write_high(&PORTB, i-dir);
 17c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <i.1631>
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 184:	68 1b       	sub	r22, r24
 186:	85 e2       	ldi	r24, 0x25	; 37
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
            
        if(i==5)
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.1631>
 192:	85 30       	cpi	r24, 0x05	; 5
 194:	21 f4       	brne	.+8      	; 0x19e <__vector_13+0x50>
            dir=-1;
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__vector_13+0x5a>
            
        if(i==2)
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <__vector_13+0x5a>
            dir=1;
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
            
        i+=dir;
 1a8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1ac:	89 0f       	add	r24, r25
 1ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.1631>
    
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
