
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e9f  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a5  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a3  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d8  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b3  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  
    reg_name++;                             
    *reg_name = *reg_name | (1<<pin_num);   
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
     *reg_name = *reg_name | (1<<pin_num);    
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 a1 00 	call	0x142	; 0x142 <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 c4 00 	call	0x188	; 0x188 <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
      TIM1_overflow_262ms();
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
      TIM1_overflow_interrupt_enable();
 10c:	ef e6       	ldi	r30, 0x6F	; 111
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
      
     // TIM0_overflow_1ms();
      //TIM0_overflow_interrupt_enable();

    // Enables interrupts by setting the global interrupt mask
    sei();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x28>

0000011a <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1

}
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_16>:
/**********************************************************************
 * Function: Timer/Counter0 overflow interrupt
 * Purpose:  Display tens and units of a counter at SSD.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
    static uint8_t pos = 0;
    
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	8a e2       	ldi	r24, 0x2A	; 42
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 14c:	67 e0       	ldi	r22, 0x07	; 7
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	84 e2       	ldi	r24, 0x24	; 36
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 160:	08 95       	ret

00000162 <SEG_clk_2us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <SEG_clk_2us+0x2>
 168:	00 00       	nop
 * Function: SEG_clk_2us()
 **********************************************************************/
void SEG_clk_2us(void)
{
    _delay_us(1);
    GPIO_write_high(&PORTD,SEG_CLK);
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <SEG_clk_2us+0x14>
 17a:	00 00       	nop
    _delay_us(1);
    GPIO_write_low(&PORTD,SEG_CLK);
 17c:	67 e0       	ldi	r22, 0x07	; 7
 17e:	8b e2       	ldi	r24, 0x2B	; 43
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 186:	08 95       	ret

00000188 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 18e:	e8 2f       	mov	r30, r24
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ec 5f       	subi	r30, 0xFC	; 252
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 198:	e6 2f       	mov	r30, r22
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);  // LATCH
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	8b e2       	ldi	r24, 0x2B	; 43
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);    // CLK
 1ac:	67 e0       	ldi	r22, 0x07	; 7
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);   // DATA
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <SEG_update_shift_regs+0x3a>
 1c6:	00 00       	nop
 1c8:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ( (segments & 0b00000001) == 1 )
 1ca:	10 ff       	sbrs	r17, 0
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <SEG_update_shift_regs+0x52>
                GPIO_write_high(&PORTB,SEG_DATA);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	85 e2       	ldi	r24, 0x25	; 37
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <SEG_update_shift_regs+0x5c>
        
        else    GPIO_write_low(&PORTB,SEG_DATA);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	85 e2       	ldi	r24, 0x25	; 37
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        SEG_clk_2us();
 1e4:	0e 94 b1 00 	call	0x162	; 0x162 <SEG_clk_2us>
        
        // Shift "segments"
        segments = segments >> 1;
 1e8:	16 95       	lsr	r17
 1ea:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
    _delay_us(1);
    
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1ec:	71 f7       	brne	.-36     	; 0x1ca <SEG_update_shift_regs+0x42>
 1ee:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ( (position & 0b00000001) == 1 ){
 1f0:	d0 ff       	sbrs	r29, 0
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <SEG_update_shift_regs+0x78>
            GPIO_write_high(&PORTB,SEG_DATA);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <SEG_update_shift_regs+0x82>
        }
        else   GPIO_write_low(&PORTB,SEG_DATA);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        SEG_clk_2us();
 20a:	0e 94 b1 00 	call	0x162	; 0x162 <SEG_clk_2us>

        // Shift "position"
        position = position >> 1;
 20e:	d6 95       	lsr	r29
 210:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 212:	71 f7       	brne	.-36     	; 0x1f0 <SEG_update_shift_regs+0x68>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD,SEG_LATCH);  // LATCH
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	8b e2       	ldi	r24, 0x2B	; 43
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <SEG_update_shift_regs+0x98>
 224:	00 00       	nop

    // Wait 1 us
    _delay_us(1);
        
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
